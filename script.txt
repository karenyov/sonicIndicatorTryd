
def hiloLine = HILO(3); //Object HiLo
def bars = BARS(); //Object Candles

r = newLines();
r.add(bars); //add bars on graphic

def hiloSize = hiloLine.size(); // size HiLo (lines size)
def barsSize = bars.size(); //size candles

def rsiLine = RSI(14, 9); //Object RSI
def rsiSize = rsiLine.size(); // size RSI (lines size)

def firstLineG = 0, firstLineR = 0, resultRSI = 0; //first signal candle
for (int i = 1; i < barsSize; i++ ) {

	def volClose = bars.bar(i).getClose(); //current vol value
	def diffColumnHilo = barsSize - hiloSize; //size bars are bigger than size candles
	
	def columnHilo = (diffColumnHilo > 0)? (i - diffColumnHilo) : i;
	def valorHilo = hiloLine.value(columnHilo);
	
	def diffColumnRSI = barsSize - rsiSize; //size bars are bigger than size candles
	def columnRSI = (diffColumnRSI > 0)? (i - diffColumnRSI) : i;
	resultRSI = rsiLine.value(columnRSI); // Sobrecompra: >= 65, Sobrevenda: <= 35
	
	if (volClose >= valorHilo && firstLineG == 0 && resultRSI < 65) { // GREEN COLOR
		bars.bar(i).setFill(0, 255, 0);
		bars.bar(i).setBorder(0, 255, 0);
		firstLineG = 1;
		firstLineR = 0;
	} else if (volClose < valorHilo && firstLineR == 0 && resultRSI > 35) { // RED COLOR
		bars.bar(i).setFill(255, 0, 0);
		bars.bar(i).setBorder(255, 0, 0);
		firstLineR = 1;
		firstLineG = 0;
	} else { // WHITE COLOR
		bars.bar(i).setFill(255, 255, 255);
		bars.bar(i).setBorder(255, 255, 255);
	}	
}

//hiloLine.setLabel('SOMA=' + resultRSI);
//r.add(hiloLine);


